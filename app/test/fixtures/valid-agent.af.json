{
  "agent_type": "letta",
  "name": "Test Assistant",
  "description": "A test agent for validating the parser",
  "system": "You are a helpful AI assistant designed to demonstrate the .af format.",
  "llm_config": {
    "provider": "openai",
    "model": "gpt-4",
    "temperature": 0.7,
    "max_tokens": 2000
  },
  "embedding_config": {
    "provider": "openai",
    "model": "text-embedding-3-small",
    "dimensions": 1536
  },
  "core_memory": [
    {
      "label": "personality",
      "value": "I am a friendly and helpful assistant who enjoys learning about new topics.",
      "character_limit": 500
    },
    {
      "label": "user_info",
      "value": "No user information available yet.",
      "character_limit": 500
    }
  ],
  "messages": [
    {
      "id": "msg_001",
      "role": "system",
      "text": "You are a helpful AI assistant.",
      "timestamp": "2024-01-01T00:00:00Z"
    },
    {
      "id": "msg_002",
      "role": "user",
      "text": "Hello! Can you help me understand the weather?",
      "timestamp": "2024-01-01T00:01:00Z"
    },
    {
      "id": "msg_003",
      "role": "assistant",
      "text": "I'd be happy to help you understand the weather! What specifically would you like to know?",
      "timestamp": "2024-01-01T00:01:30Z",
      "tool_calls": [
        {
          "id": "call_001",
          "name": "get_weather",
          "arguments": {
            "location": "current"
          }
        }
      ]
    },
    {
      "id": "msg_004",
      "role": "tool",
      "text": "Current weather: 72Â°F, partly cloudy",
      "timestamp": "2024-01-01T00:01:35Z",
      "tool_results": [
        {
          "tool_call_id": "call_001",
          "result": {
            "temperature": 72,
            "condition": "partly cloudy",
            "humidity": 65
          }
        }
      ]
    }
  ],
  "in_context_message_indices": [0, 2, 3],
  "tools": [
    {
      "name": "get_weather",
      "description": "Get current weather information for a location",
      "type": "json_schema",
      "parameters": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "The location to get weather for (city name or 'current' for current location)"
          },
          "units": {
            "type": "string",
            "description": "Temperature units",
            "enum": ["celsius", "fahrenheit"],
            "default": "fahrenheit"
          }
        },
        "required": ["location"]
      }
    },
    {
      "name": "calculate",
      "description": "Perform basic mathematical calculations",
      "type": "python",
      "parameters": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "Mathematical expression to evaluate"
          }
        },
        "required": ["expression"]
      },
      "source_code": "def calculate(expression: str) -> float:\n    \"\"\"Safely evaluate a mathematical expression.\"\"\"\n    import ast\n    import operator\n    \n    # Define allowed operations\n    ops = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n    \n    def eval_expr(node):\n        if isinstance(node, ast.Num):\n            return node.n\n        elif isinstance(node, ast.BinOp):\n            return ops[type(node.op)](eval_expr(node.left), eval_expr(node.right))\n        else:\n            raise ValueError(f\"Unsupported operation: {node}\")\n    \n    try:\n        tree = ast.parse(expression, mode='eval')\n        return eval_expr(tree.body)\n    except Exception as e:\n        raise ValueError(f\"Invalid expression: {str(e)}\")"
    }
  ],
  "tool_rules": [
    {
      "tool_name": "calculate",
      "rule_type": "max_use",
      "configuration": {
        "max_uses": 10,
        "per": "conversation"
      }
    }
  ],
  "tool_exec_environment_variables": {
    "WEATHER_API_KEY": "demo_key_123"
  },
  "tags": ["demo", "weather", "math"],
  "metadata_": {
    "source": "test_fixture",
    "capabilities": ["weather", "calculation"]
  },
  "version": "0.1.0",
  "created_at": "2024-01-01T00:00:00Z",
  "updated_at": "2024-01-01T00:02:00Z"
}